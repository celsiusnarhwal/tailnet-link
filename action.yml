name: Tailnet Link
description: Connect your GitHub Action workflow to Tailscale
branding:
  icon: arrow-right-circle
  color: gray-dark
inputs:
  authkey:
    description: A Tailscale auth key or OAuth secret.
    required: true
  tags:
    description: |
      A comma-separated list of tags to apply to nodes authenticated by this action.
    required: false
  version:
    description: The version of Tailscale to use.
    required: true
    default: latest
  extra-args:
    description: Optional additional arguments to `tailscale up`.
    required: false
  tailscaled-extra-args:
    description: 'Optional additional arguments to `tailscaled`'
    required: false
  hostname:
    description: A fixed machine name.
    required: false
  tailnet-lock:
    description: |
      Set this to `true` if, and only if, you're using tailnet lock. If you're unsure whether you need to set
      this option, you probably don't.
    required: true
    default: "false"
runs:
  using: composite
  steps:
    - name: Set Up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Determine Shell
      shell: python
      run: |
        import os
        import sys
        
        shell = "powershell" if sys.platform == "win32" else "bash"        
        print(f"SHELL={shell}", file=open(os.getenv("GITHUB_ENV"), "a"))

    - name: Install Dependencies
      shell: ${{ env.SHELL }}
      run: pip install pydantic-settings

    - name: Handle Inputs
      shell: python
      run: |
        import os
        import socket
        from tempfile import TemporaryDirectory
        
        from pydantic import field_validator, model_validator
        from pydantic_settings import BaseSettings, SettingsConfigDict
        
        
        def error(message: str):
            print(f"::error::{message}")
            exit(1)
        
        
        class TailscaleSettings(BaseSettings):
            model_config = SettingsConfigDict(env_prefix="TS_")
        
            authkey: str
            tags: str
            extra_args: str
            tailscaled_extra_args: str
            hostname: str
            tailnet_lock: bool
        
            @property
            def authkey_is_oauth(self):
                return self.authkey.startswith("tskey-client")
        
            @property
            def full_authkey(self):
                key = self.authkey
        
                if self.authkey_is_oauth:
                    key += "?preauthorized=true&ephemeral=true"
        
                return key
        
            @model_validator(mode="after")
            def validate_auth_info(self):
                if self.tailnet_lock and self.authkey_is_oauth:
                    error("You must provide an standard auth key when using tailnet lock.")
        
                return self
        
            @model_validator(mode="after")
            def validate_tags(self):
                if self.authkey_is_oauth and not self.tags:
                    error("You must provide at least one tag when using an OAuth secret.")
        
                return self
        
            @field_validator("hostname")
            def validate_hostname(cls, v):
                return v or f"github-{socket.gethostname()}"
        
        
        settings = TailscaleSettings()
        
        tailscaled_args = settings.tailscaled_extra_args
        
        print(f"TAILSCALED_ARGS={tailscaled_args}", file=open(os.getenv("GITHUB_ENV"), "a"))
        
        tailscale_args = f"--auth-key '{settings.full_authkey}' --hostname {settings.hostname} {settings.extra_args}"
        
        if settings.tags:
            tailscale_args = f"--advertise-tags {settings.tags} {tailscale_args}" 
        
        print(f"TAILSCALE_ARGS={tailscale_args}", file=open(os.getenv("GITHUB_ENV"), "a"))
      env:
        TS_AUTHKEY: ${{ inputs.authkey }}
        TS_TAGS: ${{ inputs.tags }}
        TS_EXTRA_ARGS: ${{ inputs.extra-args }}
        TS_TAILSCALED_EXTRA_ARGS: ${{ inputs.tailscaled-extra-args }}
        TS_HOSTNAME: ${{ inputs.hostname }}
        TS_TAILNET_LOCK: ${{ inputs.tailnet-lock }}

    - name: Install Tailscale (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: ${{ env.SHELL }}
      run: curl -fsSL https://tailscale.com/install.sh | sh

    - name: Install Tailscale (macoS)
      if: ${{ runner.os == 'macOS' }}
      shell: ${{ env.SHELL }}
      run: brew install tailscale

    - name: Install Tailscale (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: ${{ env.SHELL }}
      run: choco install tailscale -y

    - name: Connect to Tailscale (macOS and Linux)
      if: ${{ runner.os != 'Windows' }}
      uses: gacts/run-and-post-run@v1
      with:
        run: |
          sudo tailscaled ${{ env.TAILSCALED_ARGS }} &
          sudo tailscale up ${{ env.TAILSCALE_ARGS }}
        post: sudo tailscale logout
        shell: ${{ env.SHELL }}

    - name: Connect to Tailscale (Windows)
      if: ${{ runner.os == 'Windows' }}
      uses: gacts/run-and-post-run@v1
      with:
        run: ./tailsacle.exe up ${{ env.TAILSCALE_ARGS }}
        post: ./tailscale.exe logout
        shell: ${{ env.SHELL }}
        working-directory: 'C:/Program Files/Tailscale'

